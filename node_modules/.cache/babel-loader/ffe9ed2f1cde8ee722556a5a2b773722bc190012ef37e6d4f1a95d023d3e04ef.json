{"ast":null,"code":"var _jsxFileName = \"/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx\",\n  _s = $RefreshSig$();\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react';\nimport { useGraph, useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Model({\n  mousePosition,\n  wireframe = true\n}, ...props) {\n  _s();\n  const {\n    scene\n  } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb');\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const {\n    nodes,\n    materials\n  } = useGraph(clone);\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // Assuming you have references to the bones\n  const mesh = nodes['Wolf3D_Body'];\n  const hipsBone = mesh.skeleton.bones[0] /* reference to Hips bone */;\n  const spineBone = mesh.skeleton.bones[1] /* reference to Spine bone */;\n  const spine1Bone = mesh.skeleton.bones[2] /* reference to Spine1 bone */;\n  const spine2Bone = mesh.skeleton.bones[3] /* reference to Spine2 bone */;\n  const neckBone = mesh.skeleton.bones[4] /* reference to Neck bone */;\n  const headBone = mesh.skeleton.bones[5] /* reference to Head bone */;\n  const leftEyeBone = mesh.skeleton.bones[7] /* reference to LeftEye bone */;\n  const rightEyeBone = mesh.skeleton.bones[8] /* reference to RightEye bone */;\n\n  // Set the hierarchy\n  hipsBone.add(spineBone);\n  spineBone.add(spine1Bone);\n  spine1Bone.add(spine2Bone);\n  spine2Bone.add(neckBone);\n  neckBone.add(headBone);\n  headBone.add(leftEyeBone);\n  headBone.add(rightEyeBone);\n  const handleBone = new THREE.Bone(); // Create a handle bone for eye tracking\n  headBone.add(handleBone); // Add it to the head bone or an appropriate parent\n\n  // Update the eye positions based on mouse movement\n  function updateEyes(mousePosition) {\n    // Calculate the direction from the head to the mouse position\n    const direction = new THREE.Vector3(mousePosition.x, mousePosition.y, 10); // Your mouse position logic here\n\n    // Set the left eye's and right eye's rotation based on the direction\n    leftEyeBone.lookAt(direction);\n    rightEyeBone.lookAt(direction);\n  }\n\n  // console.log(nodes)\n\n  // const mesh = nodes['Wolf3D_Body']\n  // const rootBone = mesh.skeleton.bones[0]\n  // const handleBone = useRef(new THREE.Bone());\n\n  // React.useEffect(() => {\n  //   // Make sure to use .current when referring to the handleBone\n  //   if (rootBone && handleBone.current) {\n  //     rootBone.add(handleBone.current);\n  //   }\n  // }, [rootBone]);\n  // console.log(mesh.skeleton)\n\n  // const iks = [\n  //   {\n  //     target: handleBone.current, // \"target\"\n  //     effector: 7, // \"bone3\"\n  //     //links: [  {index: 7}, { index: 4 } ] // \"bone2\", \"bone1\", \"bone0\"\n  //   },\n  //   {\n  //     target: 4, // \"target\"\n  //     effector: 8, // \"bone3\"\n  //     //links: [  { index: 8 }, { index: 4 } ] // \"bone2\", \"bone1\", \"bone0\"\n  //   }\n  // ];\n\n  // const ikSolver = new CCDIKSolver( mesh, iks );\n  // const IK_helper = new CCDIKHelper(mesh, iks);\n  // mesh.add(CCDIKHelper)\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition) {\n      const {\n        x,\n        y\n      } = mousePosition; // Destructure mouse position\n      updateEyes(mousePosition);\n      // mesh.updateMatrixWorld(true);\n      // handleBone.current.position.x = x * 2; // Adjust scaling as needed\n      // handleBone.current.position.y = -y * 2;\n\n      // ikSolver?.update();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: nodes.Hips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Hair.geometry,\n      material: materials.Wolf3D_Hair,\n      skeleton: nodes.Wolf3D_Hair.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Body.geometry,\n      material: materials.Wolf3D_Body,\n      skeleton: nodes.Wolf3D_Body.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Bottom.geometry,\n      material: materials.Wolf3D_Outfit_Bottom,\n      skeleton: nodes.Wolf3D_Outfit_Bottom.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Footwear.geometry,\n      material: materials.Wolf3D_Outfit_Footwear,\n      skeleton: nodes.Wolf3D_Outfit_Footwear.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Top.geometry,\n      material: materials.Wolf3D_Outfit_Top,\n      skeleton: nodes.Wolf3D_Outfit_Top.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: leftEyeRef,\n      name: \"EyeLeft\",\n      geometry: nodes.EyeLeft.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeLeft.skeleton,\n      morphTargetDictionary: nodes.EyeLeft.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeLeft.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: rightEyeRef,\n      name: \"EyeRight\",\n      geometry: nodes.EyeRight.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeRight.skeleton,\n      morphTargetDictionary: nodes.EyeRight.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeRight.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: headRef,\n      name: \"Head\",\n      geometry: nodes.Wolf3D_Head.geometry,\n      material: materials.Wolf3D_Skin,\n      skeleton: nodes.Wolf3D_Head.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Head.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Head.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"Wolf3D_Teeth\",\n      geometry: nodes.Wolf3D_Teeth.geometry,\n      material: materials.Wolf3D_Teeth,\n      skeleton: nodes.Wolf3D_Teeth.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Teeth.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Teeth.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"hXYrlQL5GdsGT62Ret/Xk1CYexE=\", false, function () {\n  return [useGLTF, useGraph, useFrame];\n});\n_c = Model;\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb');\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","Children","useRef","useGraph","useFrame","useGLTF","SkeletonUtils","THREE","CCDIKSolver","CCDIKHelper","jsxDEV","_jsxDEV","Model","mousePosition","wireframe","props","_s","scene","clone","useMemo","nodes","materials","leftEyeRef","rightEyeRef","headRef","mesh","hipsBone","skeleton","bones","spineBone","spine1Bone","spine2Bone","neckBone","headBone","leftEyeBone","rightEyeBone","add","handleBone","Bone","updateEyes","direction","Vector3","x","y","lookAt","dispose","children","object","Hips","fileName","_jsxFileName","lineNumber","columnNumber","geometry","Wolf3D_Hair","material","Wolf3D_Body","Wolf3D_Outfit_Bottom","Wolf3D_Outfit_Footwear","Wolf3D_Outfit_Top","ref","name","EyeLeft","Wolf3D_Eye","morphTargetDictionary","morphTargetInfluences","EyeRight","Wolf3D_Head","Wolf3D_Skin","Wolf3D_Teeth","_c","preload","$RefreshReg$"],"sources":["/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react'\nimport { useGraph, useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\nimport { SkeletonUtils } from 'three-stdlib'\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\n\n\nexport function Model({ mousePosition, wireframe = true}, ...props ) {\n  const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n  const { nodes, materials } = useGraph(clone)\n\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // Assuming you have references to the bones\n  const mesh = nodes['Wolf3D_Body']\n  const hipsBone =  mesh.skeleton.bones[0] /* reference to Hips bone */;\n  const spineBone = mesh.skeleton.bones[1]/* reference to Spine bone */;\n  const spine1Bone = mesh.skeleton.bones[2]/* reference to Spine1 bone */;\n  const spine2Bone = mesh.skeleton.bones[3]/* reference to Spine2 bone */;\n  const neckBone = mesh.skeleton.bones[4]/* reference to Neck bone */;\n  const headBone = mesh.skeleton.bones[5] /* reference to Head bone */;\n  const leftEyeBone = mesh.skeleton.bones[7]/* reference to LeftEye bone */;\n  const rightEyeBone = mesh.skeleton.bones[8]/* reference to RightEye bone */;\n\n  // Set the hierarchy\n  hipsBone.add(spineBone);\n  spineBone.add(spine1Bone);\n  spine1Bone.add(spine2Bone);\n  spine2Bone.add(neckBone);\n  neckBone.add(headBone);\n  headBone.add(leftEyeBone);\n  headBone.add(rightEyeBone);\n\n  const handleBone = new THREE.Bone(); // Create a handle bone for eye tracking\n  headBone.add(handleBone); // Add it to the head bone or an appropriate parent\n\n  // Update the eye positions based on mouse movement\n  function updateEyes(mousePosition) {\n      // Calculate the direction from the head to the mouse position\n      const direction = new THREE.Vector3(mousePosition.x, mousePosition.y, 10); // Your mouse position logic here\n\n      // Set the left eye's and right eye's rotation based on the direction\n      leftEyeBone.lookAt(direction);\n      rightEyeBone.lookAt(direction);\n  }\n\n\n\n  // console.log(nodes)\n\n  // const mesh = nodes['Wolf3D_Body']\n  // const rootBone = mesh.skeleton.bones[0]\n  // const handleBone = useRef(new THREE.Bone());\n  \n\n  // React.useEffect(() => {\n  //   // Make sure to use .current when referring to the handleBone\n  //   if (rootBone && handleBone.current) {\n  //     rootBone.add(handleBone.current);\n  //   }\n  // }, [rootBone]);\n  // console.log(mesh.skeleton)\n\n\n\n  // const iks = [\n  //   {\n  //     target: handleBone.current, // \"target\"\n  //     effector: 7, // \"bone3\"\n  //     //links: [  {index: 7}, { index: 4 } ] // \"bone2\", \"bone1\", \"bone0\"\n  //   },\n  //   {\n  //     target: 4, // \"target\"\n  //     effector: 8, // \"bone3\"\n  //     //links: [  { index: 8 }, { index: 4 } ] // \"bone2\", \"bone1\", \"bone0\"\n  //   }\n  // ];\n\n  \n  // const ikSolver = new CCDIKSolver( mesh, iks );\n  // const IK_helper = new CCDIKHelper(mesh, iks);\n  // mesh.add(CCDIKHelper)\n  \n\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition ) {\n      const { x, y } = mousePosition; // Destructure mouse position\n      updateEyes(mousePosition)\n      // mesh.updateMatrixWorld(true);\n      // handleBone.current.position.x = x * 2; // Adjust scaling as needed\n      // handleBone.current.position.y = -y * 2;\n      \n      // ikSolver?.update();\n      \n    }\n\n   \n  });\n\n  return (\n    <group {...props} dispose={null}>\n      <primitive object={nodes.Hips} />\n      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n\n      {/* Eyes with ref for rotation */}\n      <skinnedMesh\n        ref={leftEyeRef}\n        name=\"EyeLeft\"\n        geometry={nodes.EyeLeft.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeLeft.skeleton}\n        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}\n      />\n      <skinnedMesh\n        ref={rightEyeRef}\n        name=\"EyeRight\"\n        geometry={nodes.EyeRight.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeRight.skeleton}\n        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}\n      />\n\n      <skinnedMesh\n        ref={headRef}\n        name=\"Head\" \n        geometry={nodes.Wolf3D_Head.geometry} \n        material={materials.Wolf3D_Skin} \n        skeleton={nodes.Wolf3D_Head.skeleton} \n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} \n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} \n      />\n      <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}