{"ast":null,"code":"var _jsxFileName = \"/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx\",\n  _s = $RefreshSig$();\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { useRef } from 'react';\nimport { useGraph, useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Model({\n  mousePosition,\n  ...props\n}) {\n  _s();\n  const {\n    scene\n  } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb');\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const {\n    nodes\n  } = useGraph(clone);\n  const leftEyeBone = nodes.EyeLeftBone; // Replace with actual bone name\n  const rightEyeBone = nodes.EyeRightBone; // Replace with actual bone name\n\n  useFrame(() => {\n    if (mousePosition && leftEyeBone && rightEyeBone) {\n      const {\n        x,\n        y\n      } = mousePosition;\n\n      // Apply rotation to the bones, which control the eyes\n      leftEyeBone.rotation.y = THREE.MathUtils.lerp(leftEyeBone.rotation.y, x * 0.2, 0.1);\n      leftEyeBone.rotation.x = THREE.MathUtils.lerp(leftEyeBone.rotation.x, y * 0.2, 0.1);\n      rightEyeBone.rotation.y = THREE.MathUtils.lerp(rightEyeBone.rotation.y, x * 0.2, 0.1);\n      rightEyeBone.rotation.x = THREE.MathUtils.lerp(rightEyeBone.rotation.x, y * 0.2, 0.1);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: nodes.Hips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"vIjb3gavD71XkSDw6EnPYQ7DMvg=\", false, function () {\n  return [useGLTF, useGraph, useFrame];\n});\n_c = Model;\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb');\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","useRef","useGraph","useFrame","useGLTF","SkeletonUtils","THREE","jsxDEV","_jsxDEV","Model","mousePosition","props","_s","scene","clone","useMemo","nodes","leftEyeBone","EyeLeftBone","rightEyeBone","EyeRightBone","x","y","rotation","MathUtils","lerp","dispose","children","object","Hips","fileName","_jsxFileName","lineNumber","columnNumber","_c","preload","$RefreshReg$"],"sources":["/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { useRef } from 'react';\nimport { useGraph, useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport * as THREE from 'three';\n\nexport function Model({ mousePosition, ...props }) {\n  const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb');\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const { nodes } = useGraph(clone);\n\n  const leftEyeBone = nodes.EyeLeftBone;  // Replace with actual bone name\n  const rightEyeBone = nodes.EyeRightBone;  // Replace with actual bone name\n\n  useFrame(() => {\n    if (mousePosition && leftEyeBone && rightEyeBone) {\n      const { x, y } = mousePosition;\n\n      // Apply rotation to the bones, which control the eyes\n      leftEyeBone.rotation.y = THREE.MathUtils.lerp(leftEyeBone.rotation.y, x * 0.2, 0.1);\n      leftEyeBone.rotation.x = THREE.MathUtils.lerp(leftEyeBone.rotation.x, y * 0.2, 0.1);\n\n      rightEyeBone.rotation.y = THREE.MathUtils.lerp(rightEyeBone.rotation.y, x * 0.2, 0.1);\n      rightEyeBone.rotation.x = THREE.MathUtils.lerp(rightEyeBone.rotation.x, y * 0.2, 0.1);\n    }\n  });\n\n  return (\n    <group {...props} dispose={null}>\n      <primitive object={nodes.Hips} />\n      {/* Render all other skinned meshes like before */}\n    </group>\n  );\n}\n\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb');\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,oBAAoB;AACvD,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,aAAa,QAAQ,cAAc;AAC5C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,SAASC,KAAKA,CAAC;EAAEC,aAAa;EAAE,GAAGC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACjD,MAAM;IAAEC;EAAM,CAAC,GAAGT,OAAO,CAAC,sCAAsC,CAAC;EACjE,MAAMU,KAAK,GAAGd,KAAK,CAACe,OAAO,CAAC,MAAMV,aAAa,CAACS,KAAK,CAACD,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACtE,MAAM;IAAEG;EAAM,CAAC,GAAGd,QAAQ,CAACY,KAAK,CAAC;EAEjC,MAAMG,WAAW,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAE;EACxC,MAAMC,YAAY,GAAGH,KAAK,CAACI,YAAY,CAAC,CAAE;;EAE1CjB,QAAQ,CAAC,MAAM;IACb,IAAIO,aAAa,IAAIO,WAAW,IAAIE,YAAY,EAAE;MAChD,MAAM;QAAEE,CAAC;QAAEC;MAAE,CAAC,GAAGZ,aAAa;;MAE9B;MACAO,WAAW,CAACM,QAAQ,CAACD,CAAC,GAAGhB,KAAK,CAACkB,SAAS,CAACC,IAAI,CAACR,WAAW,CAACM,QAAQ,CAACD,CAAC,EAAED,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC;MACnFJ,WAAW,CAACM,QAAQ,CAACF,CAAC,GAAGf,KAAK,CAACkB,SAAS,CAACC,IAAI,CAACR,WAAW,CAACM,QAAQ,CAACF,CAAC,EAAEC,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC;MAEnFH,YAAY,CAACI,QAAQ,CAACD,CAAC,GAAGhB,KAAK,CAACkB,SAAS,CAACC,IAAI,CAACN,YAAY,CAACI,QAAQ,CAACD,CAAC,EAAED,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC;MACrFF,YAAY,CAACI,QAAQ,CAACF,CAAC,GAAGf,KAAK,CAACkB,SAAS,CAACC,IAAI,CAACN,YAAY,CAACI,QAAQ,CAACF,CAAC,EAAEC,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC;IACvF;EACF,CAAC,CAAC;EAEF,oBACEd,OAAA;IAAA,GAAWG,KAAK;IAAEe,OAAO,EAAE,IAAK;IAAAC,QAAA,eAC9BnB,OAAA;MAAWoB,MAAM,EAAEZ,KAAK,CAACa;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE5B,CAAC;AAEZ;AAACrB,EAAA,CA3BeH,KAAK;EAAA,QACDL,OAAO,EAEPF,QAAQ,EAK1BC,QAAQ;AAAA;AAAA+B,EAAA,GARMzB,KAAK;AA6BrBL,OAAO,CAAC+B,OAAO,CAAC,sCAAsC,CAAC;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}