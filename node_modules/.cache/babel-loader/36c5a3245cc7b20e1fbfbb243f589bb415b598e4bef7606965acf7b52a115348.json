{"ast":null,"code":"var _jsxFileName = \"/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx\",\n  _s = $RefreshSig$();\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { useRef } from 'react';\nimport { useGraph, useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Model({\n  mousePosition,\n  wireframe = true\n}, ...props) {\n  _s();\n  const {\n    scene\n  } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb');\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const {\n    nodes,\n    materials\n  } = useGraph(clone);\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // const helper = new THREE.SkeletonHelper( nodes.skinnedMesh );\n  // scene.add( helper );\n\n  console.log(\"Left Eye Ref:\", leftEyeRef);\n  console.log(\"Right Eye Ref:\", rightEyeRef);\n  console.log(\"Head Ref:\", headRef);\n  console.log(nodes);\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition && leftEyeRef.current && rightEyeRef.current) {\n      const {\n        x,\n        y\n      } = mousePosition; // Destructure mouse position\n      console.log(\"mouse tracking: \" + x + \",\" + y);\n      // Apply rotations to eyes based on the normalized mouse position\n\n      // leftEyeRef.current.rotation.y = THREE.MathUtils.lerp(leftEyeRef.current.rotation.y , x , 0.5); // Y rotation for left eye\n      // leftEyeRef.current.rotation.x = THREE.MathUtils.lerp(leftEyeRef.current.rotation.x , y , 0.5); // X rotation for left eye\n\n      // rightEyeRef.current.rotation.y = THREE.MathUtils.lerp(rightEyeRef.current.rotation.y , x , 0.5); // Y rotation for right eye\n      // rightEyeRef.current.rotation.x = THREE.MathUtils.lerp(rightEyeRef.current.rotation.x , y , 0.5); // X rotation for right eye\n\n      // rightEyeRef.lookAt(new THREE.Vector3(x,y,z))\n      leftEyeRef.current.rotateX(Math.PI / 2);\n    }\n    if (mousePosition && headRef.current) {\n      const {\n        x,\n        y\n      } = mousePosition; // Destructure mouse position\n      headRef.current.rotation.y = THREE.MathUtils.lerp(headRef.current.rotation.y, x, 0.5);\n      headRef.current.rotation.x = THREE.MathUtils.lerp(headRef.current.rotation.x, y, 0.5);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: nodes.Hips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Hair.geometry,\n      material: materials.Wolf3D_Hair,\n      skeleton: nodes.Wolf3D_Hair.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Body.geometry,\n      material: materials.Wolf3D_Body,\n      skeleton: nodes.Wolf3D_Body.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Bottom.geometry,\n      material: materials.Wolf3D_Outfit_Bottom,\n      skeleton: nodes.Wolf3D_Outfit_Bottom.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Footwear.geometry,\n      material: materials.Wolf3D_Outfit_Footwear,\n      skeleton: nodes.Wolf3D_Outfit_Footwear.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Top.geometry,\n      material: materials.Wolf3D_Outfit_Top,\n      skeleton: nodes.Wolf3D_Outfit_Top.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: leftEyeRef,\n      name: \"EyeLeft\",\n      geometry: nodes.EyeLeft.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeLeft.skeleton,\n      morphTargetDictionary: nodes.EyeLeft.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeLeft.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: rightEyeRef,\n      name: \"EyeRight\",\n      geometry: nodes.EyeRight.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeRight.skeleton,\n      morphTargetDictionary: nodes.EyeRight.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeRight.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: headRef,\n      name: \"Wolf3D_Head\",\n      geometry: nodes.Wolf3D_Head.geometry,\n      material: materials.Wolf3D_Skin,\n      skeleton: nodes.Wolf3D_Head.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Head.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Head.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"Wolf3D_Teeth\",\n      geometry: nodes.Wolf3D_Teeth.geometry,\n      material: materials.Wolf3D_Teeth,\n      skeleton: nodes.Wolf3D_Teeth.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Teeth.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Teeth.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"hXYrlQL5GdsGT62Ret/Xk1CYexE=\", false, function () {\n  return [useGLTF, useGraph, useFrame];\n});\n_c = Model;\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb');\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","useRef","useGraph","useFrame","useGLTF","SkeletonUtils","THREE","jsxDEV","_jsxDEV","Model","mousePosition","wireframe","props","_s","scene","clone","useMemo","nodes","materials","leftEyeRef","rightEyeRef","headRef","console","log","current","x","y","rotateX","Math","PI","rotation","MathUtils","lerp","dispose","children","object","Hips","fileName","_jsxFileName","lineNumber","columnNumber","geometry","Wolf3D_Hair","material","skeleton","Wolf3D_Body","Wolf3D_Outfit_Bottom","Wolf3D_Outfit_Footwear","Wolf3D_Outfit_Top","ref","name","EyeLeft","Wolf3D_Eye","morphTargetDictionary","morphTargetInfluences","EyeRight","Wolf3D_Head","Wolf3D_Skin","Wolf3D_Teeth","_c","preload","$RefreshReg$"],"sources":["/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { useRef } from 'react'\nimport { useGraph, useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\nimport { SkeletonUtils } from 'three-stdlib'\nimport * as THREE from 'three';\n\nexport function Model({ mousePosition, wireframe = true}, ...props ) {\n  const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n  const { nodes, materials } = useGraph(clone)\n\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // const helper = new THREE.SkeletonHelper( nodes.skinnedMesh );\n  // scene.add( helper );\n\n  console.log(\"Left Eye Ref:\", leftEyeRef);\n  console.log(\"Right Eye Ref:\", rightEyeRef);\n  console.log(\"Head Ref:\", headRef)\n  console.log(nodes)\n  \n\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition && leftEyeRef.current && rightEyeRef.current) {\n      const { x, y } = mousePosition; // Destructure mouse position\n      console.log(\"mouse tracking: \" + x + \",\" + y)\n      // Apply rotations to eyes based on the normalized mouse position\n\n      // leftEyeRef.current.rotation.y = THREE.MathUtils.lerp(leftEyeRef.current.rotation.y , x , 0.5); // Y rotation for left eye\n      // leftEyeRef.current.rotation.x = THREE.MathUtils.lerp(leftEyeRef.current.rotation.x , y , 0.5); // X rotation for left eye\n\n      // rightEyeRef.current.rotation.y = THREE.MathUtils.lerp(rightEyeRef.current.rotation.y , x , 0.5); // Y rotation for right eye\n      // rightEyeRef.current.rotation.x = THREE.MathUtils.lerp(rightEyeRef.current.rotation.x , y , 0.5); // X rotation for right eye\n\n      \n      // rightEyeRef.lookAt(new THREE.Vector3(x,y,z))\n      leftEyeRef.current.rotateX(Math.PI/2)\n      \n    }\n\n    if (mousePosition && headRef.current){\n        const { x, y } = mousePosition; // Destructure mouse position\n        headRef.current.rotation.y =  THREE.MathUtils.lerp(headRef.current.rotation.y , x , 0.5);\n        headRef.current.rotation.x =  THREE.MathUtils.lerp(headRef.current.rotation.x , y , 0.5);\n\n    }\n  });\n\n  return (\n    <group {...props} dispose={null}>\n      <primitive object={nodes.Hips} />\n      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n\n      {/* Eyes with ref for rotation */}\n      <skinnedMesh\n        ref={leftEyeRef}\n        name=\"EyeLeft\"\n        geometry={nodes.EyeLeft.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeLeft.skeleton}\n        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}\n      />\n      <skinnedMesh\n        ref={rightEyeRef}\n        name=\"EyeRight\"\n        geometry={nodes.EyeRight.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeRight.skeleton}\n        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}\n      />\n\n      <skinnedMesh \n        ref={headRef}\n        name=\"Wolf3D_Head\" \n        geometry={nodes.Wolf3D_Head.geometry} \n        material={materials.Wolf3D_Skin} \n        skeleton={nodes.Wolf3D_Head.skeleton} \n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} \n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} \n      />\n      <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}