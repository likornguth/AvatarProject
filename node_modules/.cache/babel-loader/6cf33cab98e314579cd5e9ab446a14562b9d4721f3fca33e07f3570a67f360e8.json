{"ast":null,"code":"var _jsxFileName = \"/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx\",\n  _s = $RefreshSig$();\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react';\nimport { useGraph, useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport * as THREE from 'three';\nimport { CCDIKSolver } from 'three/addons/animation/CCDIKSolver.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Model({\n  mousePosition,\n  wireframe = true\n}, ...props) {\n  _s();\n  const {\n    scene\n  } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb');\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const {\n    nodes,\n    materials\n  } = useGraph(clone);\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // const helper = new THREE.SkeletonHelper( nodes.skinnedMesh );\n  // scene.add( helper );\n\n  //console.log(\"Left Eye Ref:\", leftEyeRef);\n  //console.log(\"Right Eye Ref:\", rightEyeRef);\n  //console.log(\"Head Ref:\", headRef)\n  console.log(nodes);\n  //console.log(nodes)\n  const bones = [];\n  bones.push(nodes['LeftEye'], nodes['RightEye'], nodes['Head']);\n  console.log(bones);\n  const iks = [{\n    target: 4,\n    // \"target\"\n    effector: 3,\n    // \"bone3\"\n    links: [{\n      index: 2\n    }, {\n      index: 1\n    }] // \"bone2\", \"bone1\", \"bone0\"\n  }];\n  const ikSolver = new CCDIKSolver(nodes['EyeLeft'], iks);\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition && leftEyeRef.current && rightEyeRef.current) {\n      const {\n        x,\n        y\n      } = mousePosition; // Destructure mouse position\n      //console.log(\"mouse tracking: \" + x + \",\" + y)\n      // Apply rotations to eyes based on the normalized mouse position\n\n      // leftEyeRef.current.rotation.y = THREE.MathUtils.lerp(leftEyeRef.current.rotation.y , x , 1); // Y rotation for left eye\n      // leftEyeRef.current.rotation.x = THREE.MathUtils.lerp(leftEyeRef.current.rotation.x , y , 1); // X rotation for left eye\n\n      // rightEyeRef.current.rotation.y = THREE.MathUtils.lerp(rightEyeRef.current.rotation.y , x , 1); // Y rotation for right eye\n      // rightEyeRef.current.rotation.x = THREE.MathUtils.lerp(rightEyeRef.current.rotation.x , y , 1); // X rotation for right eye\n\n      //console.log(leftEyeRef, rightEyeRef)\n\n      // rightEyeRef.lookAt(new THREE.Vector3(x,y,z))\n      //leftEyeRef.current.rotateX(Math.PI/4)\n\n      ikSolver === null || ikSolver === void 0 ? void 0 : ikSolver.update();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: nodes.Hips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Hair.geometry,\n      material: materials.Wolf3D_Hair,\n      skeleton: nodes.Wolf3D_Hair.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Body.geometry,\n      material: materials.Wolf3D_Body,\n      skeleton: nodes.Wolf3D_Body.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Bottom.geometry,\n      material: materials.Wolf3D_Outfit_Bottom,\n      skeleton: nodes.Wolf3D_Outfit_Bottom.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Footwear.geometry,\n      material: materials.Wolf3D_Outfit_Footwear,\n      skeleton: nodes.Wolf3D_Outfit_Footwear.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Top.geometry,\n      material: materials.Wolf3D_Outfit_Top,\n      skeleton: nodes.Wolf3D_Outfit_Top.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: leftEyeRef,\n      name: \"EyeLeft\",\n      geometry: nodes.EyeLeft.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeLeft.skeleton,\n      morphTargetDictionary: nodes.EyeLeft.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeLeft.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: rightEyeRef,\n      name: \"EyeRight\",\n      geometry: nodes.EyeRight.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeRight.skeleton,\n      morphTargetDictionary: nodes.EyeRight.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeRight.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: headRef,\n      name: \"Wolf3D_Head\",\n      geometry: nodes.Wolf3D_Head.geometry,\n      material: materials.Wolf3D_Skin,\n      skeleton: nodes.Wolf3D_Head.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Head.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Head.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"Wolf3D_Teeth\",\n      geometry: nodes.Wolf3D_Teeth.geometry,\n      material: materials.Wolf3D_Teeth,\n      skeleton: nodes.Wolf3D_Teeth.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Teeth.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Teeth.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"hXYrlQL5GdsGT62Ret/Xk1CYexE=\", false, function () {\n  return [useGLTF, useGraph, useFrame];\n});\n_c = Model;\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb');\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","Children","useRef","useGraph","useFrame","useGLTF","SkeletonUtils","THREE","CCDIKSolver","jsxDEV","_jsxDEV","Model","mousePosition","wireframe","props","_s","scene","clone","useMemo","nodes","materials","leftEyeRef","rightEyeRef","headRef","console","log","bones","push","iks","target","effector","links","index","ikSolver","current","x","y","update","dispose","children","object","Hips","fileName","_jsxFileName","lineNumber","columnNumber","geometry","Wolf3D_Hair","material","skeleton","Wolf3D_Body","Wolf3D_Outfit_Bottom","Wolf3D_Outfit_Footwear","Wolf3D_Outfit_Top","ref","name","EyeLeft","Wolf3D_Eye","morphTargetDictionary","morphTargetInfluences","EyeRight","Wolf3D_Head","Wolf3D_Skin","Wolf3D_Teeth","_c","preload","$RefreshReg$"],"sources":["/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react'\nimport { useGraph, useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\nimport { SkeletonUtils } from 'three-stdlib'\nimport * as THREE from 'three';\nimport { CCDIKSolver } from 'three/addons/animation/CCDIKSolver.js';\n\n\nexport function Model({ mousePosition, wireframe = true}, ...props ) {\n  const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n  const { nodes, materials } = useGraph(clone)\n\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // const helper = new THREE.SkeletonHelper( nodes.skinnedMesh );\n  // scene.add( helper );\n\n  //console.log(\"Left Eye Ref:\", leftEyeRef);\n  //console.log(\"Right Eye Ref:\", rightEyeRef);\n  //console.log(\"Head Ref:\", headRef)\n  console.log(nodes)\n  //console.log(nodes)\n  const bones = []\n  bones.push(nodes['LeftEye'], nodes['RightEye'], nodes['Head'])\n  console.log(bones)\n\n\n\n\n  const iks = [\n    {\n      target: 4, // \"target\"\n      effector: 3, // \"bone3\"\n      links: [  { index: 2 }, { index: 1 } ] // \"bone2\", \"bone1\", \"bone0\"\n    }\n  ];\n  \n  const ikSolver = new CCDIKSolver( nodes['EyeLeft'], iks );\n\n  \n\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition && leftEyeRef.current && rightEyeRef.current) {\n      const { x, y } = mousePosition; // Destructure mouse position\n      //console.log(\"mouse tracking: \" + x + \",\" + y)\n      // Apply rotations to eyes based on the normalized mouse position\n\n      // leftEyeRef.current.rotation.y = THREE.MathUtils.lerp(leftEyeRef.current.rotation.y , x , 1); // Y rotation for left eye\n      // leftEyeRef.current.rotation.x = THREE.MathUtils.lerp(leftEyeRef.current.rotation.x , y , 1); // X rotation for left eye\n\n      // rightEyeRef.current.rotation.y = THREE.MathUtils.lerp(rightEyeRef.current.rotation.y , x , 1); // Y rotation for right eye\n      // rightEyeRef.current.rotation.x = THREE.MathUtils.lerp(rightEyeRef.current.rotation.x , y , 1); // X rotation for right eye\n\n      //console.log(leftEyeRef, rightEyeRef)\n      \n      // rightEyeRef.lookAt(new THREE.Vector3(x,y,z))\n      //leftEyeRef.current.rotateX(Math.PI/4)\n      \n      ikSolver?.update();\n      \n    }\n\n   \n  });\n\n  return (\n    <group {...props} dispose={null}>\n      <primitive object={nodes.Hips} />\n      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n\n      {/* Eyes with ref for rotation */}\n      <skinnedMesh\n        ref={leftEyeRef}\n        name=\"EyeLeft\"\n        geometry={nodes.EyeLeft.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeLeft.skeleton}\n        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}\n      />\n      <skinnedMesh\n        ref={rightEyeRef}\n        name=\"EyeRight\"\n        geometry={nodes.EyeRight.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeRight.skeleton}\n        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}\n      />\n\n      <skinnedMesh \n        ref={headRef}\n        name=\"Wolf3D_Head\" \n        geometry={nodes.Wolf3D_Head.geometry} \n        material={materials.Wolf3D_Skin} \n        skeleton={nodes.Wolf3D_Head.skeleton} \n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} \n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} \n      />\n      <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}