{"ast":null,"code":"var _jsxFileName = \"/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx\",\n  _s = $RefreshSig$();\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react';\nimport { useGraph, useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Model({\n  mousePosition,\n  playAnimation,\n  wireframe = true\n}, ...props) {\n  _s();\n  const {\n    scene\n  } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb');\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const {\n    nodes,\n    materials\n  } = useGraph(clone);\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // Assuming you have references to the bones\n  const mesh = nodes['Wolf3D_Body'];\n  console.log(mesh.skeleton);\n  const hipsBone = mesh.skeleton.bones[0] /* reference to Hips bone */;\n  const spineBone = mesh.skeleton.bones[1] /* reference to Spine bone */;\n  const spine1Bone = mesh.skeleton.bones[2] /* reference to Spine1 bone */;\n  const spine2Bone = mesh.skeleton.bones[3] /* reference to Spine2 bone */;\n  const neckBone = mesh.skeleton.bones[4] /* reference to Neck bone */;\n  const headBone = mesh.skeleton.bones[5] /* reference to Head bone */;\n  const leftEyeBone = mesh.skeleton.bones[7] /* reference to LeftEye bone */;\n  const rightEyeBone = mesh.skeleton.bones[8] /* reference to RightEye bone */;\n  const leftShoulder = mesh.skeleton.bones[9];\n  const leftArm = mesh.skeleton.bones[10];\n  const leftForearm = mesh.skeleton.bones[11];\n  const rightShoulder = mesh.skeleton.bones[33];\n  const rightArm = mesh.skeleton.bones[34];\n  const rightForearm = mesh.skeleton.bones[35];\n\n  // Set the hierarchy\n  hipsBone.add(spineBone);\n  spineBone.add(spine1Bone);\n  spine1Bone.add(spine2Bone);\n  spine2Bone.add(neckBone);\n  neckBone.add(headBone);\n  headBone.add(leftEyeBone);\n  headBone.add(rightEyeBone);\n  spine2Bone.add(leftShoulder);\n  spine2Bone.add(rightShoulder);\n  leftShoulder.add(leftArm);\n  leftArm.add(leftForearm);\n  rightShoulder.add(rightArm);\n  rightArm.add(rightForearm);\n  function to_rad(degrees) {\n    const rad = degrees * Math.PI / 180.0;\n    return rad;\n  }\n  leftShoulder.rotation.y = to_rad(-25.0);\n  rightShoulder.rotation.y = to_rad(25.0);\n  const handleBone = new THREE.Bone(); // Create a handle bone for eye tracking\n  headBone.add(handleBone); // Add it to the head bone or an appropriate parent\n\n  // Update the eye positions based on mouse movement\n  function updateEyes(mousePosition) {\n    // Calculate the direction from the head to the mouse position\n    const eyedirection = new THREE.Vector3(mousePosition.x * 1.5, mousePosition.y * 1.5, 5); // Your mouse position logic here\n    const headdirection = new THREE.Vector3(mousePosition.x / 2, mousePosition.y / 2, 5);\n    // Set the left eye's and right eye's rotation based on the direction\n    leftEyeBone.lookAt(eyedirection);\n    rightEyeBone.lookAt(eyedirection);\n    headBone.lookAt(headdirection);\n  }\n  let waveStep = 0;\n  function waveHello(leftShoulder, leftForearm) {\n    // Simple wave by oscillating the arm back and forth\n    const maxRotation = 45.0 * (Math.PI / 180.0); // 45 degrees in radians\n    const waveSpeed = 0.05; // Adjust this value to control speed\n\n    // Increment wave step\n    waveStep += waveSpeed;\n\n    // Oscillate the left forearm and shoulder rotation for the wave motion\n    //leftShoulder.rotation.z = Math.sin(waveStep) * maxRotation; // Oscillate shoulder on z-axis\n    leftShoulder.rotation.y = to_rad(7 * waveStep - 25.0);\n    leftShoulder.rotation.x = to_rad(10 * waveStep);\n    leftForearm.rotation.z = to_rad(20 * waveStep);\n    //leftForearm.rotation.y = Math.sin(waveStep * 2) * maxRotation; // Oscillate forearm faster for waving motion\n\n    if (waveStep > Math.PI * 2) {\n      waveStep = 0; // Reset after one wave cycle\n    }\n  }\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition) {\n      const {\n        x,\n        y\n      } = mousePosition; // Destructure mouse position\n      updateEyes(mousePosition);\n    }\n    if (playAnimation) {\n      waveHello(leftShoulder, leftForearm);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: nodes.Hips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Hair.geometry,\n      material: materials.Wolf3D_Hair,\n      skeleton: nodes.Wolf3D_Hair.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Body.geometry,\n      material: materials.Wolf3D_Body,\n      skeleton: nodes.Wolf3D_Body.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Bottom.geometry,\n      material: materials.Wolf3D_Outfit_Bottom,\n      skeleton: nodes.Wolf3D_Outfit_Bottom.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Footwear.geometry,\n      material: materials.Wolf3D_Outfit_Footwear,\n      skeleton: nodes.Wolf3D_Outfit_Footwear.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Top.geometry,\n      material: materials.Wolf3D_Outfit_Top,\n      skeleton: nodes.Wolf3D_Outfit_Top.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: leftEyeRef,\n      name: \"EyeLeft\",\n      geometry: nodes.EyeLeft.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeLeft.skeleton,\n      morphTargetDictionary: nodes.EyeLeft.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeLeft.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: rightEyeRef,\n      name: \"EyeRight\",\n      geometry: nodes.EyeRight.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeRight.skeleton,\n      morphTargetDictionary: nodes.EyeRight.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeRight.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: headRef,\n      name: \"Wolf3D_Head\",\n      geometry: nodes.Wolf3D_Head.geometry,\n      material: materials.Wolf3D_Skin,\n      skeleton: nodes.Wolf3D_Head.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Head.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Head.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"Wolf3D_Teeth\",\n      geometry: nodes.Wolf3D_Teeth.geometry,\n      material: materials.Wolf3D_Teeth,\n      skeleton: nodes.Wolf3D_Teeth.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Teeth.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Teeth.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"hXYrlQL5GdsGT62Ret/Xk1CYexE=\", false, function () {\n  return [useGLTF, useGraph, useFrame];\n});\n_c = Model;\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb');\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","Children","useRef","useGraph","useFrame","useGLTF","SkeletonUtils","THREE","CCDIKSolver","CCDIKHelper","jsxDEV","_jsxDEV","Model","mousePosition","playAnimation","wireframe","props","_s","scene","clone","useMemo","nodes","materials","leftEyeRef","rightEyeRef","headRef","mesh","console","log","skeleton","hipsBone","bones","spineBone","spine1Bone","spine2Bone","neckBone","headBone","leftEyeBone","rightEyeBone","leftShoulder","leftArm","leftForearm","rightShoulder","rightArm","rightForearm","add","to_rad","degrees","rad","Math","PI","rotation","y","handleBone","Bone","updateEyes","eyedirection","Vector3","x","headdirection","lookAt","waveStep","waveHello","maxRotation","waveSpeed","z","dispose","children","object","Hips","fileName","_jsxFileName","lineNumber","columnNumber","geometry","Wolf3D_Hair","material","Wolf3D_Body","Wolf3D_Outfit_Bottom","Wolf3D_Outfit_Footwear","Wolf3D_Outfit_Top","ref","name","EyeLeft","Wolf3D_Eye","morphTargetDictionary","morphTargetInfluences","EyeRight","Wolf3D_Head","Wolf3D_Skin","Wolf3D_Teeth","_c","preload","$RefreshReg$"],"sources":["/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react'\nimport { useGraph, useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\nimport { SkeletonUtils } from 'three-stdlib'\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\n\n\nexport function Model({ mousePosition, playAnimation , wireframe = true}, ...props ) {\n  const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n  const { nodes, materials } = useGraph(clone)\n\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // Assuming you have references to the bones\n  const mesh = nodes['Wolf3D_Body']\n\n  console.log(mesh.skeleton)\n  const hipsBone =  mesh.skeleton.bones[0] /* reference to Hips bone */;\n  const spineBone = mesh.skeleton.bones[1]/* reference to Spine bone */;\n  const spine1Bone = mesh.skeleton.bones[2]/* reference to Spine1 bone */;\n  const spine2Bone = mesh.skeleton.bones[3]/* reference to Spine2 bone */;\n  const neckBone = mesh.skeleton.bones[4]/* reference to Neck bone */;\n  const headBone = mesh.skeleton.bones[5] /* reference to Head bone */;\n  const leftEyeBone = mesh.skeleton.bones[7]/* reference to LeftEye bone */;\n  const rightEyeBone = mesh.skeleton.bones[8]/* reference to RightEye bone */;\n  const leftShoulder = mesh.skeleton.bones[9] \n  const leftArm = mesh.skeleton.bones[10] \n  const leftForearm = mesh.skeleton.bones[11] \n  const rightShoulder = mesh.skeleton.bones[33] \n  const rightArm = mesh.skeleton.bones[34] \n  const rightForearm = mesh.skeleton.bones[35] \n\n\n  // Set the hierarchy\n  hipsBone.add(spineBone);\n  spineBone.add(spine1Bone);\n  spine1Bone.add(spine2Bone);\n  spine2Bone.add(neckBone);\n  neckBone.add(headBone);\n  headBone.add(leftEyeBone);\n  headBone.add(rightEyeBone);\n\n  spine2Bone.add(leftShoulder)\n  spine2Bone.add(rightShoulder)\n  leftShoulder.add(leftArm)\n  leftArm.add(leftForearm)\n  rightShoulder.add(rightArm)\n  rightArm.add(rightForearm)\n\n  function to_rad(degrees){\n    const rad = degrees * Math.PI / 180.0\n    return rad\n  }\n\n  leftShoulder.rotation.y = to_rad(-25.0)\n  rightShoulder.rotation.y = to_rad(25.0)\n\n  const handleBone = new THREE.Bone(); // Create a handle bone for eye tracking\n  headBone.add(handleBone); // Add it to the head bone or an appropriate parent\n\n  // Update the eye positions based on mouse movement\n  function updateEyes(mousePosition) {\n      // Calculate the direction from the head to the mouse position\n      const eyedirection = new THREE.Vector3(mousePosition.x * 1.5, mousePosition.y * 1.5, 5); // Your mouse position logic here\n      const headdirection = new THREE.Vector3(mousePosition.x/2, mousePosition.y/2, 5);\n      // Set the left eye's and right eye's rotation based on the direction\n      leftEyeBone.lookAt(eyedirection);\n      rightEyeBone.lookAt(eyedirection);\n      headBone.lookAt(headdirection)\n  }\n\n  let waveStep = 0\n  function waveHello(leftShoulder, leftForearm) {\n    // Simple wave by oscillating the arm back and forth\n    const maxRotation = 45.0 * (Math.PI / 180.0); // 45 degrees in radians\n    const waveSpeed = 0.05; // Adjust this value to control speed\n  \n    // Increment wave step\n    waveStep += waveSpeed;\n  \n    // Oscillate the left forearm and shoulder rotation for the wave motion\n    //leftShoulder.rotation.z = Math.sin(waveStep) * maxRotation; // Oscillate shoulder on z-axis\n    leftShoulder.rotation.y = to_rad(7*waveStep-25.0)\n    leftShoulder.rotation.x = to_rad(10*waveStep)\n    leftForearm.rotation.z = to_rad(20*waveStep)\n    //leftForearm.rotation.y = Math.sin(waveStep * 2) * maxRotation; // Oscillate forearm faster for waving motion\n\n\n  \n    if (waveStep > Math.PI * 2) {\n      waveStep = 0; // Reset after one wave cycle\n    }\n  }\n  \n\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition ) {\n      const { x, y } = mousePosition; // Destructure mouse position\n      updateEyes(mousePosition)\n      \n    }\n\n    if(playAnimation){\n      waveHello(leftShoulder, leftForearm)\n    }\n\n   \n  });\n\n  return (\n    <group {...props} dispose={null}>\n      <primitive object={nodes.Hips} />\n      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n\n      {/* Eyes with ref for rotation */}\n      <skinnedMesh\n        ref={leftEyeRef}\n        name=\"EyeLeft\"\n        geometry={nodes.EyeLeft.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeLeft.skeleton}\n        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}\n      />\n      <skinnedMesh\n        ref={rightEyeRef}\n        name=\"EyeRight\"\n        geometry={nodes.EyeRight.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeRight.skeleton}\n        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}\n      />\n\n      <skinnedMesh\n        ref={headRef}\n        name=\"Wolf3D_Head\" \n        geometry={nodes.Wolf3D_Head.geometry} \n        material={materials.Wolf3D_Skin} \n        skeleton={nodes.Wolf3D_Head.skeleton} \n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} \n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} \n      />\n      <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}