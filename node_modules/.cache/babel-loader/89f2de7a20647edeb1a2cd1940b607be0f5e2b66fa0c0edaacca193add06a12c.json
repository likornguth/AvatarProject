{"ast":null,"code":"var _jsxFileName = \"/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx\",\n  _s = $RefreshSig$();\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react';\nimport { useGraph, useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Model({\n  mousePosition,\n  playAnimation,\n  wireframe = true\n}, ...props) {\n  _s();\n  const {\n    scene\n  } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb');\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const {\n    nodes,\n    materials\n  } = useGraph(clone);\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // Assuming you have references to the bones\n  const mesh = nodes['Wolf3D_Body'];\n  console.log(nodes['Wolf3D_Head']);\n  const hipsBone = mesh.skeleton.bones[0] /* reference to Hips bone */;\n  const spineBone = mesh.skeleton.bones[1] /* reference to Spine bone */;\n  const spine1Bone = mesh.skeleton.bones[2] /* reference to Spine1 bone */;\n  const spine2Bone = mesh.skeleton.bones[3] /* reference to Spine2 bone */;\n  const neckBone = mesh.skeleton.bones[4] /* reference to Neck bone */;\n  const headBone = mesh.skeleton.bones[5] /* reference to Head bone */;\n  const leftEyeBone = mesh.skeleton.bones[7] /* reference to LeftEye bone */;\n  const rightEyeBone = mesh.skeleton.bones[8] /* reference to RightEye bone */;\n  const leftShoulder = mesh.skeleton.bones[9];\n  const leftArm = mesh.skeleton.bones[10];\n  const leftForearm = mesh.skeleton.bones[11];\n  const rightShoulder = mesh.skeleton.bones[33];\n  const rightArm = mesh.skeleton.bones[34];\n  const rightForearm = mesh.skeleton.bones[35];\n\n  // Set the hierarchy\n  hipsBone.add(spineBone);\n  spineBone.add(spine1Bone);\n  spine1Bone.add(spine2Bone);\n  spine2Bone.add(neckBone);\n  neckBone.add(headBone);\n  headBone.add(leftEyeBone);\n  headBone.add(rightEyeBone);\n  spine2Bone.add(leftShoulder);\n  spine2Bone.add(rightShoulder);\n  leftShoulder.add(leftArm);\n  leftArm.add(leftForearm);\n  rightShoulder.add(rightArm);\n  rightArm.add(rightForearm);\n  function to_rad(degrees) {\n    const rad = degrees * Math.PI / 180.0;\n    return rad;\n  }\n  leftShoulder.rotation.y = to_rad(-25.0);\n  rightShoulder.rotation.y = to_rad(25.0);\n  leftShoulder.rotation.x = 1.5198795050922367;\n  // shoulder rotation\n  // _x :  1.5198795050922367\n  // _y :  -0.4363323129985824\n  // _z :  -1.753153402330732\n  //forearm rotation\n  // _x : 0.034283133132039754\n  // _y : -0.010623913109914352\n  // _z : 0.4801787367349862\n\n  function resetLeftArm() {\n    leftShoulder.rotation.x = 1.5198795050922367;\n    leftShoulder.rotation.y = -0.4363323129985824;\n    leftShoulder.rotation.z = -1.753153402330732;\n    leftForearm.rotation.x = 0.034283133132039754;\n    leftForearm.rotation.y = -0.010623913109914352;\n    leftForearm.rotation.z = 0.4801787367349862;\n  }\n  const handleBone = new THREE.Bone(); // Create a handle bone for eye tracking\n  headBone.add(handleBone); // Add it to the head bone or an appropriate parent\n\n  // Update the eye positions based on mouse movement\n  function updateEyes(mousePosition) {\n    // Calculate the direction from the head to the mouse position\n    const eyedirection = new THREE.Vector3(mousePosition.x * 1.5, mousePosition.y * 1.5, 5); // Your mouse position logic here\n    const headdirection = new THREE.Vector3(mousePosition.x / 2, mousePosition.y / 2, 5);\n    // Set the left eye's and right eye's rotation based on the direction\n    leftEyeBone.lookAt(eyedirection);\n    rightEyeBone.lookAt(eyedirection);\n    headBone.lookAt(headdirection);\n  }\n  let waveStep = 0;\n  function waveHello(leftShoulder, leftForearm) {\n    // Simple wave by oscillating the arm back and forth\n    nodes.Wolf3D_Head.morphTargetInfluences[1] = Math.min(waveStep, .5); // mouthsmile morph target infl\n    nodes.Wolf3D_Head.morphTargetInfluences[0] = Math.min(waveStep, .2); // mouthopen morph target influencer\n    const maxRotation = 25.0 * (Math.PI / 180.0); // 45 degrees in radians\n    const waveSpeed = 0.05; // Adjust this value to control speed\n\n    // Increment wave step\n    waveStep += waveSpeed;\n\n    // Oscillate the left forearm and shoulder rotation for the wave motion\n    //leftShoulder.rotation.z = Math.sin(waveStep) * maxRotation; // Oscillate shoulder on z-axis\n    leftShoulder.rotation.y = Math.min(to_rad(20 * waveStep - 25.0), maxRotation);\n    leftShoulder.rotation.x = Math.max(-waveStep + 1.5198795050922367, to_rad(-5.0));\n    leftForearm.rotation.z = Math.min(2 * waveStep, Math.PI / 2.0);\n    if (waveStep > 5 && waveStep <= 10) {\n      //waveStep = 0; // Reset after one wave cycle\n      //leftForearm.rotation.x = Math.sin(waveStep * 2) * maxRotation; // Oscillate forearm faster for waving motion\n      leftForearm.rotation.z = Math.sin(waveStep * 2) * maxRotation + Math.PI / 2.0;\n    }\n    if (waveStep > 10) {\n      let steps_remaining = 15 - waveStep;\n      leftShoulder.rotation.x = -1.5198795050922367 + steps_remaining;\n      leftShoulder.rotation.y = -0.4363323129985824 + steps_remaining;\n      leftShoulder.rotation.z = -1.753153402330732 + steps_remaining;\n      leftForearm.rotation.x = 0.034283133132039754 + steps_remaining;\n      leftForearm.rotation.y = -0.010623913109914352 + steps_remaining;\n      leftForearm.rotation.z = 0.4801787367349862 + steps_remaining;\n    }\n  }\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (playAnimation) {\n      waveHello(leftShoulder, leftForearm);\n    } else {\n      resetLeftArm();\n      nodes.Wolf3D_Head.morphTargetInfluences[1] = 0;\n      nodes.Wolf3D_Head.morphTargetInfluences[0] = 0;\n      if (mousePosition) {\n        const {\n          x,\n          y\n        } = mousePosition; // Destructure mouse position\n        updateEyes(mousePosition);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: nodes.Hips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Hair.geometry,\n      material: materials.Wolf3D_Hair,\n      skeleton: nodes.Wolf3D_Hair.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Body.geometry,\n      material: materials.Wolf3D_Body,\n      skeleton: nodes.Wolf3D_Body.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Bottom.geometry,\n      material: materials.Wolf3D_Outfit_Bottom,\n      skeleton: nodes.Wolf3D_Outfit_Bottom.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Footwear.geometry,\n      material: materials.Wolf3D_Outfit_Footwear,\n      skeleton: nodes.Wolf3D_Outfit_Footwear.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Top.geometry,\n      material: materials.Wolf3D_Outfit_Top,\n      skeleton: nodes.Wolf3D_Outfit_Top.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: leftEyeRef,\n      name: \"EyeLeft\",\n      geometry: nodes.EyeLeft.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeLeft.skeleton,\n      morphTargetDictionary: nodes.EyeLeft.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeLeft.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: rightEyeRef,\n      name: \"EyeRight\",\n      geometry: nodes.EyeRight.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeRight.skeleton,\n      morphTargetDictionary: nodes.EyeRight.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeRight.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: headRef,\n      name: \"Wolf3D_Head\",\n      geometry: nodes.Wolf3D_Head.geometry,\n      material: materials.Wolf3D_Skin,\n      skeleton: nodes.Wolf3D_Head.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Head.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Head.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"Wolf3D_Teeth\",\n      geometry: nodes.Wolf3D_Teeth.geometry,\n      material: materials.Wolf3D_Teeth,\n      skeleton: nodes.Wolf3D_Teeth.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Teeth.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Teeth.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"hXYrlQL5GdsGT62Ret/Xk1CYexE=\", false, function () {\n  return [useGLTF, useGraph, useFrame];\n});\n_c = Model;\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb');\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","Children","useRef","useGraph","useFrame","useGLTF","SkeletonUtils","THREE","CCDIKSolver","CCDIKHelper","jsxDEV","_jsxDEV","Model","mousePosition","playAnimation","wireframe","props","_s","scene","clone","useMemo","nodes","materials","leftEyeRef","rightEyeRef","headRef","mesh","console","log","hipsBone","skeleton","bones","spineBone","spine1Bone","spine2Bone","neckBone","headBone","leftEyeBone","rightEyeBone","leftShoulder","leftArm","leftForearm","rightShoulder","rightArm","rightForearm","add","to_rad","degrees","rad","Math","PI","rotation","y","x","resetLeftArm","z","handleBone","Bone","updateEyes","eyedirection","Vector3","headdirection","lookAt","waveStep","waveHello","Wolf3D_Head","morphTargetInfluences","min","maxRotation","waveSpeed","max","sin","steps_remaining","dispose","children","object","Hips","fileName","_jsxFileName","lineNumber","columnNumber","geometry","Wolf3D_Hair","material","Wolf3D_Body","Wolf3D_Outfit_Bottom","Wolf3D_Outfit_Footwear","Wolf3D_Outfit_Top","ref","name","EyeLeft","Wolf3D_Eye","morphTargetDictionary","EyeRight","Wolf3D_Skin","Wolf3D_Teeth","_c","preload","$RefreshReg$"],"sources":["/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react'\nimport { useGraph, useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\nimport { SkeletonUtils } from 'three-stdlib'\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\n\n\nexport function Model({ mousePosition, playAnimation , wireframe = true}, ...props ) {\n  const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n  const { nodes, materials } = useGraph(clone)\n\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // Assuming you have references to the bones\n  const mesh = nodes['Wolf3D_Body']\n  console.log(nodes['Wolf3D_Head'])\n  \n  const hipsBone =  mesh.skeleton.bones[0] /* reference to Hips bone */;\n  const spineBone = mesh.skeleton.bones[1]/* reference to Spine bone */;\n  const spine1Bone = mesh.skeleton.bones[2]/* reference to Spine1 bone */;\n  const spine2Bone = mesh.skeleton.bones[3]/* reference to Spine2 bone */;\n  const neckBone = mesh.skeleton.bones[4]/* reference to Neck bone */;\n  const headBone = mesh.skeleton.bones[5] /* reference to Head bone */;\n  const leftEyeBone = mesh.skeleton.bones[7]/* reference to LeftEye bone */;\n  const rightEyeBone = mesh.skeleton.bones[8]/* reference to RightEye bone */;\n  const leftShoulder = mesh.skeleton.bones[9] \n  const leftArm = mesh.skeleton.bones[10] \n  const leftForearm = mesh.skeleton.bones[11] \n  const rightShoulder = mesh.skeleton.bones[33] \n  const rightArm = mesh.skeleton.bones[34] \n  const rightForearm = mesh.skeleton.bones[35] \n\n\n  // Set the hierarchy\n  hipsBone.add(spineBone);\n  spineBone.add(spine1Bone);\n  spine1Bone.add(spine2Bone);\n  spine2Bone.add(neckBone);\n  neckBone.add(headBone);\n  headBone.add(leftEyeBone);\n  headBone.add(rightEyeBone);\n\n  spine2Bone.add(leftShoulder)\n  spine2Bone.add(rightShoulder)\n  leftShoulder.add(leftArm)\n  leftArm.add(leftForearm)\n  rightShoulder.add(rightArm)\n  rightArm.add(rightForearm)\n\n  function to_rad(degrees){\n    const rad = degrees * Math.PI / 180.0\n    return rad\n  }\n\n  leftShoulder.rotation.y = to_rad(-25.0)\n  rightShoulder.rotation.y = to_rad(25.0)\n  leftShoulder.rotation.x = 1.5198795050922367\n// shoulder rotation\n// _x :  1.5198795050922367\n// _y :  -0.4363323129985824\n// _z :  -1.753153402330732\n//forearm rotation\n// _x : 0.034283133132039754\n// _y : -0.010623913109914352\n// _z : 0.4801787367349862\n\n  function resetLeftArm(){\n    leftShoulder.rotation.x = 1.5198795050922367\n    leftShoulder.rotation.y =  -0.4363323129985824\n    leftShoulder.rotation.z = -1.753153402330732\n    leftForearm.rotation.x = 0.034283133132039754\n    leftForearm.rotation.y = -0.010623913109914352\n    leftForearm.rotation.z = 0.4801787367349862\n  }\n\n\n\n  const handleBone = new THREE.Bone(); // Create a handle bone for eye tracking\n  headBone.add(handleBone); // Add it to the head bone or an appropriate parent\n\n  // Update the eye positions based on mouse movement\n  function updateEyes(mousePosition) {\n      // Calculate the direction from the head to the mouse position\n      const eyedirection = new THREE.Vector3(mousePosition.x * 1.5, mousePosition.y * 1.5, 5); // Your mouse position logic here\n      const headdirection = new THREE.Vector3(mousePosition.x/2, mousePosition.y/2, 5);\n      // Set the left eye's and right eye's rotation based on the direction\n      leftEyeBone.lookAt(eyedirection);\n      rightEyeBone.lookAt(eyedirection);\n      headBone.lookAt(headdirection)\n  }\n\n  let waveStep = 0\n  function waveHello(leftShoulder, leftForearm) {\n    // Simple wave by oscillating the arm back and forth\n    nodes.Wolf3D_Head.morphTargetInfluences[1] = Math.min(waveStep, .5) // mouthsmile morph target infl\n    nodes.Wolf3D_Head.morphTargetInfluences[0] = Math.min(waveStep, .2) // mouthopen morph target influencer\n    const maxRotation = 25.0 * (Math.PI / 180.0); // 45 degrees in radians\n    const waveSpeed = 0.05; // Adjust this value to control speed\n  \n    // Increment wave step\n    waveStep += waveSpeed;\n  \n    // Oscillate the left forearm and shoulder rotation for the wave motion\n    //leftShoulder.rotation.z = Math.sin(waveStep) * maxRotation; // Oscillate shoulder on z-axis\n    leftShoulder.rotation.y = Math.min(to_rad(20*waveStep-25.0), maxRotation)\n    leftShoulder.rotation.x = Math.max(-waveStep+1.5198795050922367,to_rad(-5.0))\n    leftForearm.rotation.z = Math.min(2*waveStep, Math.PI/2.0)\n\n  \n    if (waveStep > 5 && waveStep <= 10) {\n      //waveStep = 0; // Reset after one wave cycle\n      //leftForearm.rotation.x = Math.sin(waveStep * 2) * maxRotation; // Oscillate forearm faster for waving motion\n      leftForearm.rotation.z = Math.sin(waveStep * 2) * maxRotation + Math.PI/2.0\n    }\n    if (waveStep > 10){\n      let steps_remaining = 15-waveStep\n      leftShoulder.rotation.x = -1.5198795050922367 + (steps_remaining)\n      leftShoulder.rotation.y =  -0.4363323129985824 + steps_remaining\n      leftShoulder.rotation.z = -1.753153402330732 + steps_remaining\n      leftForearm.rotation.x =  0.034283133132039754 + steps_remaining\n      leftForearm.rotation.y = -0.010623913109914352 + steps_remaining\n      leftForearm.rotation.z = 0.4801787367349862 + steps_remaining\n    }\n  }\n  \n\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if(playAnimation){\n      waveHello(leftShoulder, leftForearm)\n      \n    }\n    else {\n      resetLeftArm()\n      nodes.Wolf3D_Head.morphTargetInfluences[1] = 0\n      nodes.Wolf3D_Head.morphTargetInfluences[0] = 0\n      if (mousePosition ) {\n        const { x, y } = mousePosition; // Destructure mouse position\n        updateEyes(mousePosition)\n        \n      }\n\n    }\n    \n    \n    \n \n      \n      \n\n    \n\n   \n  });\n\n  return (\n    <group {...props} dispose={null}>\n      <primitive object={nodes.Hips} />\n      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n\n      {/* Eyes with ref for rotation */}\n      <skinnedMesh\n        ref={leftEyeRef}\n        name=\"EyeLeft\"\n        geometry={nodes.EyeLeft.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeLeft.skeleton}\n        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}\n      />\n      <skinnedMesh\n        ref={rightEyeRef}\n        name=\"EyeRight\"\n        geometry={nodes.EyeRight.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeRight.skeleton}\n        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}\n      />\n\n      <skinnedMesh\n        ref={headRef}\n        name=\"Wolf3D_Head\" \n        geometry={nodes.Wolf3D_Head.geometry} \n        material={materials.Wolf3D_Skin} \n        skeleton={nodes.Wolf3D_Head.skeleton} \n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} \n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} \n      />\n      <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}