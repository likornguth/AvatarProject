{"ast":null,"code":"var _jsxFileName = \"/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx\",\n  _s = $RefreshSig$();\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react';\nimport { useGraph, useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Model({\n  mousePosition,\n  wireframe = true\n}, ...props) {\n  _s();\n  const {\n    scene\n  } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb');\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const {\n    nodes,\n    materials\n  } = useGraph(clone);\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // const helper = new THREE.SkeletonHelper( nodes.skinnedMesh );\n  // scene.add( helper );\n\n  //console.log(\"Left Eye Ref:\", leftEyeRef);\n  //console.log(\"Right Eye Ref:\", rightEyeRef);\n  //console.log(\"Head Ref:\", headRef)\n  // const mesh = nodes['Wolf3D_Body']\n  // console.log(mesh)\n  // //console.log(nodes)\n  // const handleBone = new THREE.Bone();\n  // handleBone.position.y = 0;\n  // handleBone.position.z = 1.8;\n  // handleBone.position.x = .03;\n\n  // const iks = [\n  //   {\n  //     target: 4, // \"target\"\n  //     effector: 3, // \"bone3\"\n  //     links: [  {index: 7}, { index: 8 }, { index: 4 } ] // \"bone2\", \"bone1\", \"bone0\"\n  //   }\n  // ];\n\n  // const ikSolver = new CCDIKSolver( mesh, iks );\n  // const IK_helper = new CCDIKHelper(mesh, iks);\n  // scene.add(IK_helper);\n  let bones = [];\n\n  // \"root\"\n  let rootBone = new THREE.Bone();\n  rootBone.position.y = -12;\n  bones.push(rootBone);\n\n  // \"bone0\"\n  let prevBone = new THREE.Bone();\n  prevBone.position.y = 0;\n  rootBone.add(prevBone);\n  bones.push(prevBone);\n\n  // \"bone1\", \"bone2\", \"bone3\"\n  for (let i = 1; i <= 3; i++) {\n    const bone = new THREE.Bone();\n    bone.position.y = 8;\n    bones.push(bone);\n    prevBone.add(bone);\n    prevBone = bone;\n  }\n\n  // \"target\"\n  const targetBone = new THREE.Bone();\n  targetBone.position.y = 24 + 8;\n  rootBone.add(targetBone);\n  bones.push(targetBone);\n\n  //\n  // skinned mesh\n  //\n\n  const mesh = new THREE.SkinnedMesh(geometry, material);\n  const skeleton = new THREE.Skeleton(bones);\n  mesh.add(bones[0]); // \"root\" bone\n  mesh.bind(skeleton);\n\n  //\n  // ikSolver\n  //\n\n  const iks = [{\n    target: 5,\n    // \"target\"\n    effector: 4,\n    // \"bone3\"\n    links: [{\n      index: 3\n    }, {\n      index: 2\n    }, {\n      index: 1\n    }] // \"bone2\", \"bone1\", \"bone0\"\n  }];\n  ikSolver = new CCDIKSolver(mesh, iks);\n\n  // function render() {\n  // \tikSolver?.update();\n  // \trenderer.render( scene, camera );\n  // }\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition && leftEyeRef.current && rightEyeRef.current) {\n      var _ikSolver;\n      const {\n        x,\n        y\n      } = mousePosition; // Destructure mouse position\n      //console.log(\"mouse tracking: \" + x + \",\" + y)\n      // Apply rotations to eyes based on the normalized mouse position\n\n      // leftEyeRef.current.rotation.y = THREE.MathUtils.lerp(leftEyeRef.current.rotation.y , x , 1); // Y rotation for left eye\n      // leftEyeRef.current.rotation.x = THREE.MathUtils.lerp(leftEyeRef.current.rotation.x , y , 1); // X rotation for left eye\n\n      // rightEyeRef.current.rotation.y = THREE.MathUtils.lerp(rightEyeRef.current.rotation.y , x , 1); // Y rotation for right eye\n      // rightEyeRef.current.rotation.x = THREE.MathUtils.lerp(rightEyeRef.current.rotation.x , y , 1); // X rotation for right eye\n\n      //console.log(leftEyeRef, rightEyeRef)\n\n      // rightEyeRef.lookAt(new THREE.Vector3(x,y,z))\n      //leftEyeRef.current.rotateX(Math.PI/4)\n\n      (_ikSolver = ikSolver) === null || _ikSolver === void 0 ? void 0 : _ikSolver.update();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: nodes.Hips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Hair.geometry,\n      material: materials.Wolf3D_Hair,\n      skeleton: nodes.Wolf3D_Hair.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Body.geometry,\n      material: materials.Wolf3D_Body,\n      skeleton: nodes.Wolf3D_Body.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Bottom.geometry,\n      material: materials.Wolf3D_Outfit_Bottom,\n      skeleton: nodes.Wolf3D_Outfit_Bottom.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Footwear.geometry,\n      material: materials.Wolf3D_Outfit_Footwear,\n      skeleton: nodes.Wolf3D_Outfit_Footwear.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Top.geometry,\n      material: materials.Wolf3D_Outfit_Top,\n      skeleton: nodes.Wolf3D_Outfit_Top.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: leftEyeRef,\n      name: \"EyeLeft\",\n      geometry: nodes.EyeLeft.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeLeft.skeleton,\n      morphTargetDictionary: nodes.EyeLeft.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeLeft.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: rightEyeRef,\n      name: \"EyeRight\",\n      geometry: nodes.EyeRight.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeRight.skeleton,\n      morphTargetDictionary: nodes.EyeRight.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeRight.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: headRef,\n      name: \"Head\",\n      geometry: nodes.Wolf3D_Head.geometry,\n      material: materials.Wolf3D_Skin,\n      skeleton: nodes.Wolf3D_Head.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Head.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Head.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"Wolf3D_Teeth\",\n      geometry: nodes.Wolf3D_Teeth.geometry,\n      material: materials.Wolf3D_Teeth,\n      skeleton: nodes.Wolf3D_Teeth.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Teeth.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Teeth.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"hXYrlQL5GdsGT62Ret/Xk1CYexE=\", false, function () {\n  return [useGLTF, useGraph, useFrame];\n});\n_c = Model;\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb');\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","Children","useRef","useGraph","useFrame","useGLTF","SkeletonUtils","THREE","CCDIKSolver","CCDIKHelper","jsxDEV","_jsxDEV","Model","mousePosition","wireframe","props","_s","scene","clone","useMemo","nodes","materials","leftEyeRef","rightEyeRef","headRef","bones","rootBone","Bone","position","y","push","prevBone","add","i","bone","targetBone","mesh","SkinnedMesh","geometry","material","skeleton","Skeleton","bind","iks","target","effector","links","index","ikSolver","current","_ikSolver","x","update","dispose","children","object","Hips","fileName","_jsxFileName","lineNumber","columnNumber","Wolf3D_Hair","Wolf3D_Body","Wolf3D_Outfit_Bottom","Wolf3D_Outfit_Footwear","Wolf3D_Outfit_Top","ref","name","EyeLeft","Wolf3D_Eye","morphTargetDictionary","morphTargetInfluences","EyeRight","Wolf3D_Head","Wolf3D_Skin","Wolf3D_Teeth","_c","preload","$RefreshReg$"],"sources":["/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react'\nimport { useGraph, useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\nimport { SkeletonUtils } from 'three-stdlib'\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\n\n\nexport function Model({ mousePosition, wireframe = true}, ...props ) {\n  const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n  const { nodes, materials } = useGraph(clone)\n\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // const helper = new THREE.SkeletonHelper( nodes.skinnedMesh );\n  // scene.add( helper );\n\n  //console.log(\"Left Eye Ref:\", leftEyeRef);\n  //console.log(\"Right Eye Ref:\", rightEyeRef);\n  //console.log(\"Head Ref:\", headRef)\n  // const mesh = nodes['Wolf3D_Body']\n  // console.log(mesh)\n  // //console.log(nodes)\n  // const handleBone = new THREE.Bone();\n  // handleBone.position.y = 0;\n  // handleBone.position.z = 1.8;\n  // handleBone.position.x = .03;\n\n\n  // const iks = [\n  //   {\n  //     target: 4, // \"target\"\n  //     effector: 3, // \"bone3\"\n  //     links: [  {index: 7}, { index: 8 }, { index: 4 } ] // \"bone2\", \"bone1\", \"bone0\"\n  //   }\n  // ];\n  \n  // const ikSolver = new CCDIKSolver( mesh, iks );\n  // const IK_helper = new CCDIKHelper(mesh, iks);\n  // scene.add(IK_helper);\n  let bones = []\n\n// \"root\"\nlet rootBone = new THREE.Bone();\nrootBone.position.y = -12;\nbones.push( rootBone );\n\n// \"bone0\"\nlet prevBone = new THREE.Bone();\nprevBone.position.y = 0;\nrootBone.add( prevBone );\nbones.push( prevBone );\n\n// \"bone1\", \"bone2\", \"bone3\"\nfor ( let i = 1; i <= 3; i ++ ) {\n\tconst bone = new THREE.Bone();\n\tbone.position.y = 8;\n\tbones.push( bone );\n\t\n\tprevBone.add( bone );\n\tprevBone = bone;\n}\n\n// \"target\"\nconst targetBone = new THREE.Bone();\ntargetBone.position.y = 24 + 8\nrootBone.add( targetBone );\nbones.push( targetBone );\n\n//\n// skinned mesh\n//\n\nconst mesh = new THREE.SkinnedMesh( geometry,\tmaterial );\nconst skeleton = new THREE.Skeleton( bones );\n\nmesh.add( bones[ 0 ] ); // \"root\" bone\nmesh.bind( skeleton );\n\n//\n// ikSolver\n//\n\nconst iks = [\n\t{\n\t\ttarget: 5, // \"target\"\n\t\teffector: 4, // \"bone3\"\n\t\tlinks: [ { index: 3 }, { index: 2 }, { index: 1 } ] // \"bone2\", \"bone1\", \"bone0\"\n\t}\n];\nikSolver = new CCDIKSolver( mesh, iks );\n\n// function render() {\n// \tikSolver?.update();\n// \trenderer.render( scene, camera );\n// }\n  \n\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition && leftEyeRef.current && rightEyeRef.current) {\n      const { x, y } = mousePosition; // Destructure mouse position\n      //console.log(\"mouse tracking: \" + x + \",\" + y)\n      // Apply rotations to eyes based on the normalized mouse position\n\n      // leftEyeRef.current.rotation.y = THREE.MathUtils.lerp(leftEyeRef.current.rotation.y , x , 1); // Y rotation for left eye\n      // leftEyeRef.current.rotation.x = THREE.MathUtils.lerp(leftEyeRef.current.rotation.x , y , 1); // X rotation for left eye\n\n      // rightEyeRef.current.rotation.y = THREE.MathUtils.lerp(rightEyeRef.current.rotation.y , x , 1); // Y rotation for right eye\n      // rightEyeRef.current.rotation.x = THREE.MathUtils.lerp(rightEyeRef.current.rotation.x , y , 1); // X rotation for right eye\n\n      //console.log(leftEyeRef, rightEyeRef)\n      \n      // rightEyeRef.lookAt(new THREE.Vector3(x,y,z))\n      //leftEyeRef.current.rotateX(Math.PI/4)\n      \n      ikSolver?.update();\n      \n    }\n\n   \n  });\n\n  return (\n    <group {...props} dispose={null}>\n      <primitive object={nodes.Hips} />\n      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n\n      {/* Eyes with ref for rotation */}\n      <skinnedMesh\n        ref={leftEyeRef}\n        name=\"EyeLeft\"\n        geometry={nodes.EyeLeft.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeLeft.skeleton}\n        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}\n      />\n      <skinnedMesh\n        ref={rightEyeRef}\n        name=\"EyeRight\"\n        geometry={nodes.EyeRight.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeRight.skeleton}\n        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}\n      />\n\n      <skinnedMesh\n        ref={headRef}\n        name=\"Head\" \n        geometry={nodes.Wolf3D_Head.geometry} \n        material={materials.Wolf3D_Skin} \n        skeleton={nodes.Wolf3D_Head.skeleton} \n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} \n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} \n      />\n      <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}