{"ast":null,"code":"var _jsxFileName = \"/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx\",\n  _s = $RefreshSig$();\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react';\nimport { useGraph, useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Model({\n  mousePosition,\n  wireframe = true\n}, ...props) {\n  _s();\n  const {\n    scene\n  } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb');\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const {\n    nodes,\n    materials\n  } = useGraph(clone);\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // const helper = new THREE.SkeletonHelper( nodes.skinnedMesh );\n  // scene.add( helper );\n\n  //console.log(\"Left Eye Ref:\", leftEyeRef);\n  //console.log(\"Right Eye Ref:\", rightEyeRef);\n  //console.log(\"Head Ref:\", headRef)\n  // const mesh = nodes['Wolf3D_Body']; // Assuming 'Wolf3D_Body' is your main mesh\n  // const handleBone = useRef(new THREE.Bone());\n\n  //   // // IK structure setup\n  // const iks = [\n  //   {\n  //     target: handleBone.current, // Invisible handle bone to track mouse\n  //     effector: nodes.EyeLeft, // Bone that controls the eye\n  //     links: [{ index: 7 }, { index: 8 }, { index: 4 }], // Other bones involved in the IK chain\n  //   },\n  //   {\n  //     target: handleBone.current,\n  //     effector: nodes.EyeRight, // Second eye bone\n  //     links: [{ index: 7 }, { index: 8 }, { index: 4 }],\n  //   },\n  // ];\n\n  // const ikSolver = new CCDIKSolver(mesh, iks);\n  // const IKHelper = new CCDIKHelper(mesh, iks);\n  // mesh.add(IKHelper);\n\n  console.log(nodes);\n  const mesh = nodes['Wolf3D_Body'];\n  const rootBone = mesh.skeleton.bones[0];\n  const handleBone = useRef(new THREE.Bone());\n  React.useEffect(() => {\n    // Make sure to use .current when referring to the handleBone\n    if (rootBone && handleBone.current) {\n      rootBone.add(handleBone.current);\n    }\n  }, [rootBone]);\n  const iks = [{\n    target: 4,\n    // \"target\"\n    effector: 7,\n    // \"bone3\"\n    links: [{\n      index: 7\n    }, {\n      index: 4\n    }] // \"bone2\", \"bone1\", \"bone0\"\n  }, {\n    target: 4,\n    // \"target\"\n    effector: 8,\n    // \"bone3\"\n    links: [{\n      index: 8\n    }, {\n      index: 4\n    }] // \"bone2\", \"bone1\", \"bone0\"\n  }];\n  const ikSolver = new CCDIKSolver(mesh, iks);\n  const IK_helper = new CCDIKHelper(mesh, iks);\n  mesh.add(CCDIKHelper);\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition) {\n      const {\n        x,\n        y\n      } = mousePosition; // Destructure mouse position\n\n      mesh.updateMatrixWorld(true);\n      handleBone.current.position.x = x * 2; // Adjust scaling as needed\n      handleBone.current.position.y = -y * 2;\n      ikSolver === null || ikSolver === void 0 ? void 0 : ikSolver.update();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: nodes.Hips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Hair.geometry,\n      material: materials.Wolf3D_Hair,\n      skeleton: nodes.Wolf3D_Hair.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Body.geometry,\n      material: materials.Wolf3D_Body,\n      skeleton: nodes.Wolf3D_Body.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Bottom.geometry,\n      material: materials.Wolf3D_Outfit_Bottom,\n      skeleton: nodes.Wolf3D_Outfit_Bottom.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Footwear.geometry,\n      material: materials.Wolf3D_Outfit_Footwear,\n      skeleton: nodes.Wolf3D_Outfit_Footwear.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Top.geometry,\n      material: materials.Wolf3D_Outfit_Top,\n      skeleton: nodes.Wolf3D_Outfit_Top.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: leftEyeRef,\n      name: \"EyeLeft\",\n      geometry: nodes.EyeLeft.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeLeft.skeleton,\n      morphTargetDictionary: nodes.EyeLeft.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeLeft.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: rightEyeRef,\n      name: \"EyeRight\",\n      geometry: nodes.EyeRight.geometry,\n      material: materials.Wolf3D_Eye,\n      skeleton: nodes.EyeRight.skeleton,\n      morphTargetDictionary: nodes.EyeRight.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeRight.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      ref: headRef,\n      name: \"Head\",\n      geometry: nodes.Wolf3D_Head.geometry,\n      material: materials.Wolf3D_Skin,\n      skeleton: nodes.Wolf3D_Head.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Head.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Head.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"Wolf3D_Teeth\",\n      geometry: nodes.Wolf3D_Teeth.geometry,\n      material: materials.Wolf3D_Teeth,\n      skeleton: nodes.Wolf3D_Teeth.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Teeth.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Teeth.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"lkVJ+2pibn1J/eK7pUPvYdCRuEg=\", false, function () {\n  return [useGLTF, useGraph, useFrame];\n});\n_c = Model;\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb');\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","Children","useRef","useGraph","useFrame","useGLTF","SkeletonUtils","THREE","CCDIKSolver","CCDIKHelper","jsxDEV","_jsxDEV","Model","mousePosition","wireframe","props","_s","scene","clone","useMemo","nodes","materials","leftEyeRef","rightEyeRef","headRef","console","log","mesh","rootBone","skeleton","bones","handleBone","Bone","useEffect","current","add","iks","target","effector","links","index","ikSolver","IK_helper","x","y","updateMatrixWorld","position","update","dispose","children","object","Hips","fileName","_jsxFileName","lineNumber","columnNumber","geometry","Wolf3D_Hair","material","Wolf3D_Body","Wolf3D_Outfit_Bottom","Wolf3D_Outfit_Footwear","Wolf3D_Outfit_Top","ref","name","EyeLeft","Wolf3D_Eye","morphTargetDictionary","morphTargetInfluences","EyeRight","Wolf3D_Head","Wolf3D_Skin","Wolf3D_Teeth","_c","preload","$RefreshReg$"],"sources":["/Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/src/ReadyPlayerMeAvatar.jsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform \nFiles: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)\n*/\n\n// import React from 'react'\n// import { useGraph } from '@react-three/fiber'\n// import { useGLTF } from '@react-three/drei'\n// import { SkeletonUtils } from 'three-stdlib'\n\n// export function Model(props) {\n//   const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n//   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n//   const { nodes, materials } = useGraph(clone)\n//   return (\n//     <group {...props} dispose={null}>\n//       <primitive object={nodes.Hips} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n//       <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n//       <skinnedMesh name=\"EyeLeft\" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />\n//       <skinnedMesh name=\"EyeRight\" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Head\" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />\n//       <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n//     </group>\n//   )\n// }\n\n// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\nimport React, { Children, useRef } from 'react'\nimport { useGraph, useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\nimport { SkeletonUtils } from 'three-stdlib'\nimport * as THREE from 'three';\nimport { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\n\n\nexport function Model({ mousePosition, wireframe = true}, ...props ) {\n  const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')\n  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])\n  const { nodes, materials } = useGraph(clone)\n\n  const leftEyeRef = useRef();\n  const rightEyeRef = useRef();\n  const headRef = useRef();\n\n  // const helper = new THREE.SkeletonHelper( nodes.skinnedMesh );\n  // scene.add( helper );\n\n  //console.log(\"Left Eye Ref:\", leftEyeRef);\n  //console.log(\"Right Eye Ref:\", rightEyeRef);\n  //console.log(\"Head Ref:\", headRef)\n  // const mesh = nodes['Wolf3D_Body']; // Assuming 'Wolf3D_Body' is your main mesh\n  // const handleBone = useRef(new THREE.Bone());\n\n    //   // // IK structure setup\n  // const iks = [\n  //   {\n  //     target: handleBone.current, // Invisible handle bone to track mouse\n  //     effector: nodes.EyeLeft, // Bone that controls the eye\n  //     links: [{ index: 7 }, { index: 8 }, { index: 4 }], // Other bones involved in the IK chain\n  //   },\n  //   {\n  //     target: handleBone.current,\n  //     effector: nodes.EyeRight, // Second eye bone\n  //     links: [{ index: 7 }, { index: 8 }, { index: 4 }],\n  //   },\n  // ];\n  \n\n\n  // const ikSolver = new CCDIKSolver(mesh, iks);\n  // const IKHelper = new CCDIKHelper(mesh, iks);\n  // mesh.add(IKHelper);\n\n  console.log(nodes)\n\n\n  const mesh = nodes['Wolf3D_Body']\n  const rootBone = mesh.skeleton.bones[0]\n  const handleBone = useRef(new THREE.Bone());\n  \n\n  React.useEffect(() => {\n    // Make sure to use .current when referring to the handleBone\n    if (rootBone && handleBone.current) {\n      rootBone.add(handleBone.current);\n    }\n  }, [rootBone]);\n\n\n\n\n  const iks = [\n    {\n      target: 4, // \"target\"\n      effector: 7, // \"bone3\"\n      links: [  {index: 7}, { index: 4 } ] // \"bone2\", \"bone1\", \"bone0\"\n    },\n    {\n      target: 4, // \"target\"\n      effector: 8, // \"bone3\"\n      links: [  { index: 8 }, { index: 4 } ] // \"bone2\", \"bone1\", \"bone0\"\n    }\n  ];\n\n\n\n  \n  const ikSolver = new CCDIKSolver( mesh, iks );\n  const IK_helper = new CCDIKHelper(mesh, iks);\n  mesh.add(CCDIKHelper)\n  \n\n\n  // Rotate eyes based on mouse position\n  useFrame(() => {\n    if (mousePosition ) {\n      const { x, y } = mousePosition; // Destructure mouse position\n      \n      mesh.updateMatrixWorld(true);\n      handleBone.current.position.x = x * 2; // Adjust scaling as needed\n      handleBone.current.position.y = -y * 2;\n      \n      ikSolver?.update();\n      \n    }\n\n   \n  });\n\n  return (\n    <group {...props} dispose={null}>\n      <primitive object={nodes.Hips} />\n      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />\n      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />\n\n      {/* Eyes with ref for rotation */}\n      <skinnedMesh\n        ref={leftEyeRef}\n        name=\"EyeLeft\"\n        geometry={nodes.EyeLeft.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeLeft.skeleton}\n        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}\n      />\n      <skinnedMesh\n        ref={rightEyeRef}\n        name=\"EyeRight\"\n        geometry={nodes.EyeRight.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeRight.skeleton}\n        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}\n      />\n\n      <skinnedMesh\n        ref={headRef}\n        name=\"Head\" \n        geometry={nodes.Wolf3D_Head.geometry} \n        material={materials.Wolf3D_Skin} \n        skeleton={nodes.Wolf3D_Head.skeleton} \n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} \n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} \n      />\n      <skinnedMesh name=\"Wolf3D_Teeth\" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}