/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 ReadyPlayerMeAvatar.glb --transform 
Files: ReadyPlayerMeAvatar.glb [889.78KB] > /Users/lindsaykornguth/Projects/RPM_Project/AvatarProject/public/ReadyPlayerMeAvatar-transformed.glb [550.12KB] (38%)
*/

// useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')
import React, { Children, useRef } from 'react'
import { useGraph, useFrame } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import * as THREE from 'three';
import { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';


export function Model({ mousePosition, wireframe = true}, ...props ) {
  const { scene } = useGLTF('/ReadyPlayerMeAvatar-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  const leftEyeRef = useRef();
  const rightEyeRef = useRef();
  const headRef = useRef();

  // Assuming you have references to the bones
  const mesh = nodes['Wolf3D_Body']
  const hipsBone =  mesh.skeleton.bones[0] /* reference to Hips bone */;
  const spineBone = mesh.skeleton.bones[1]/* reference to Spine bone */;
  const spine1Bone = mesh.skeleton.bones[2]/* reference to Spine1 bone */;
  const spine2Bone = mesh.skeleton.bones[3]/* reference to Spine2 bone */;
  const neckBone = mesh.skeleton.bones[4]/* reference to Neck bone */;
  const headBone = mesh.skeleton.bones[5] /* reference to Head bone */;
  const leftEyeBone = mesh.skeleton.bones[7]/* reference to LeftEye bone */;
  const rightEyeBone = mesh.skeleton.bones[8]/* reference to RightEye bone */;

  // Set the hierarchy
  hipsBone.add(spineBone);
  spineBone.add(spine1Bone);
  spine1Bone.add(spine2Bone);
  spine2Bone.add(neckBone);
  neckBone.add(headBone);
  headBone.add(leftEyeBone);
  headBone.add(rightEyeBone);

  const handleBone = new THREE.Bone(); // Create a handle bone for eye tracking
  headBone.add(handleBone); // Add it to the head bone or an appropriate parent

  // Update the eye positions based on mouse movement
  function updateEyes(mousePosition) {
      // Calculate the direction from the head to the mouse position
      const eyedirection = new THREE.Vector3(mousePosition.x * 1.5, mousePosition.y * 1.5, 5); // Your mouse position logic here
      const headdirection = new THREE.Vector3(mousePosition.x/2, mousePosition.y/2, 5);
      // Set the left eye's and right eye's rotation based on the direction
      leftEyeBone.lookAt(eyedirection);
      rightEyeBone.lookAt(eyedirection);
      headBone.lookAt(headdirection)
  }


  // Rotate eyes based on mouse position
  useFrame(() => {
    if (mousePosition ) {
      const { x, y } = mousePosition; // Destructure mouse position
      updateEyes(mousePosition)
      
      
    }

   
  });

  return (
    <group {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />

      {/* Eyes with ref for rotation */}
      <skinnedMesh
        ref={leftEyeRef}
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        ref={rightEyeRef}
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />

      <skinnedMesh
        ref={headRef}
        name="Wolf3D_Head" 
        geometry={nodes.Wolf3D_Head.geometry} 
        material={materials.Wolf3D_Skin} 
        skeleton={nodes.Wolf3D_Head.skeleton} 
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} 
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} 
      />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('/ReadyPlayerMeAvatar-transformed.glb')

